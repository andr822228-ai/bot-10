import os
import logging
import sqlite3
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from telegram import (
    Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN environment variable not set")

ADMINS = [6582122671, 861941692]

DB_FILE = "bot.db"
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

active_chats = {}
user_state = {}

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            first_name TEXT,
            last_name TEXT,
            username TEXT,
            phone TEXT
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS consultations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            datetime TEXT,
            created_at TEXT DEFAULT (datetime('now','localtime')),
            FOREIGN KEY(user_id) REFERENCES users(user_id)
        )
    """)
    conn.commit()
    conn.close()

def add_or_update_user(user_id, first_name, last_name, username, phone):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO users (user_id, first_name, last_name, username, phone)
        VALUES (?, ?, ?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET
            first_name=excluded.first_name,
            last_name=excluded.last_name,
            username=excluded.username,
            phone=excluded.phone
    """, (user_id, first_name, last_name, username, phone))
    conn.commit()
    conn.close()

def get_user_phone(user_id):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("SELECT phone FROM users WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    conn.close()
    if row and row[0]:
        return row[0]
    return None

def add_consultation(user_id, datetime_text):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("INSERT INTO consultations (user_id, datetime) VALUES (?, ?)", (user_id, datetime_text))
    conn.commit()
    conn.close()

def fetch_consultations():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""
        SELECT c.id, c.user_id, u.username, u.phone, c.datetime, c.created_at
        FROM consultations c
        LEFT JOIN users u ON u.user_id = c.user_id
        ORDER BY c.id DESC
    """)
    rows = cur.fetchall()
    conn.close()
    return rows

def fetch_users():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("SELECT user_id, first_name, last_name, username, phone FROM users ORDER BY user_id")
    rows = cur.fetchall()
    conn.close()
    return rows

def delete_consultation(consult_id):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("DELETE FROM consultations WHERE id = ?", (consult_id,))
    deleted = cur.rowcount
    conn.commit()
    conn.close()
    return deleted > 0

def delete_user(user_id):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("DELETE FROM consultations WHERE user_id = ?", (user_id,))
    cur.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    deleted = cur.rowcount
    conn.commit()
    conn.close()
    return deleted > 0

class KeepAliveHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(b'Bot is running 24/7!')
    
    def log_message(self, format, *args):
        # –í–∏–º–∫–Ω—É—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è HTTP –∑–∞–ø–∏—Ç—ñ–≤
        pass

def run_server():
    server = HTTPServer(('0.0.0.0', 8080), KeepAliveHandler)
    server.serve_forever()

def start_keepalive():
    server_thread = threading.Thread(target=run_server, daemon=True)
    server_thread.start()
    logger.info("HTTP keepalive server –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 8080")

def main_menu_markup():
    return ReplyKeyboardMarkup(
        [
            ["–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞ —Ä–µ–∫–ª–∞–º–∞", "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∞–π—Ç—É"],
            ["–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó", "–î–æ–¥–∞–≤–∞–Ω–Ω—è –º—ñ—Ç–æ–∫ –Ω–∞ –∫–∞—Ä—Ç—É"]
        ], resize_keyboard=True
    )

def service_options_markup():
    return ReplyKeyboardMarkup(
        [["–ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é"], ["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞ –≥–æ–ª–æ–≤–Ω—É"]], resize_keyboard=True
    )

def admin_menu_markup():
    return ReplyKeyboardMarkup(
        [
            ["–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó", "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"],
            ["–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç"],
            ["–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç"]
        ], resize_keyboard=True
    )

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    phone = get_user_phone(user.id)

    if user.id in ADMINS:
        await update.message.reply_text("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ! –û—Å—å –º–µ–Ω—é:", reply_markup=admin_menu_markup())
        return

    if not phone:
        kb = ReplyKeyboardMarkup([[KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
                                 one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ñ—Ç–∞—é! –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º:",
            reply_markup=kb
        )
    else:
        await update.message.reply_text("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –û—Å—å –º–µ–Ω—é:", reply_markup=main_menu_markup())

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    user = update.effective_user
    phone = contact.phone_number
    add_or_update_user(user.id, user.first_name, user.last_name or "", user.username or "", phone)

    if user.id in ADMINS:
        await update.message.reply_text("–î—è–∫—É—î–º–æ! –ù–æ–º–µ—Ä –æ—Ç—Ä–∏–º–∞–Ω–æ.", reply_markup=admin_menu_markup())
    else:
        await update.message.reply_text("–î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.", reply_markup=main_menu_markup())

async def menu_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    phone = get_user_phone(user_id)

    if user_id not in ADMINS and not phone:
        kb = ReplyKeyboardMarkup([[KeyboardButton("–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
                                 one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º:",
            reply_markup=kb
        )
        return

    if user_id in active_chats:
        text = (update.message.text or "").strip()

        if user_id in ADMINS and text.startswith("/"):
            return

        if text.lower() == "–∑–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç":
            target_id = active_chats[user_id]
            await context.bot.send_message(target_id, "–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            await context.bot.send_message(user_id, "–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            for k in (user_id, target_id):
                if k in active_chats:
                    del active_chats[k]

            if user_id in ADMINS:
                await update.message.reply_text("–ê–¥–º—ñ–Ω –º–µ–Ω—é:", reply_markup=admin_menu_markup())
            else:
                await update.message.reply_text("–û—Å—å –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_markup())
            return

        return await relay_message(update, context)

    text = (update.message.text or "").strip()

    if user_id in ADMINS:
        if text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó":
            await consultations_command(update, context)
        elif text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤":
            await users_command(update, context)
        elif text == "–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç":
            await show_users_for_deletion(update, context)
        elif text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç":
            await update.message.reply_text("–í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ —É —á–∞—Ç—ñ.", reply_markup=admin_menu_markup())
        else:
            await update.message.reply_text("–û–±—Ä–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é:", reply_markup=admin_menu_markup())
        return

    if text == "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞ —Ä–µ–∫–ª–∞–º–∞":
        await update.message.reply_text("üì¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –¥–æ–ø–æ–º–æ–∂–µ —à–≤–∏–¥–∫–æ –∑–∞–ª—É—á–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤...\n\n",
                                        reply_markup=service_options_markup())
    elif text == "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∞–π—Ç—É":
        await update.message.reply_text("üíª –°—Ç–≤–æ—Ä–∏–º–æ —Å—É—á–∞—Å–Ω–∏–π —Å–∞–π—Ç –ø—ñ–¥ –≤–∞—à –±—ñ–∑–Ω–µ—Å...\n\n",
                                        reply_markup=service_options_markup())
    elif text == "–î–æ–¥–∞–≤–∞–Ω–Ω—è –º—ñ—Ç–æ–∫ –Ω–∞ –∫–∞—Ä—Ç—É":
        await update.message.reply_text("üó∫Ô∏è –î–æ–¥–∞—î–º–æ –º—ñ—Ç–∫–∏ —É Google Maps –¥–ª—è –≤–∞—à–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É...\n\n",
                                        reply_markup=service_options_markup())
    elif text == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó":
        await update.message.reply_text(
            "üí¨ –ù–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó —è –ø–æ–¥—ñ–ª—é—Å—å –ø—Ä–æ—Å—Ç–∏–º–∏ –ø–æ—Ä–∞–¥–∞–º–∏, —è–∫ –≤–µ—Å—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å —É Google Maps —Ç–∞ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –ø—Ä–æ—Å—É–≤–∞—Ç–∏ —Å–≤–æ—é –º—ñ—Ç–∫—É, —â–æ–± –≤–∞—Å –ª–µ–≥–∫–æ –∑–Ω–∞—Ö–æ–¥–∏–ª–∏ –∫–ª—ñ—î–Ω—Ç–∏."
        )
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –±–∞–∂–∞–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 15.08 14:00):", reply_markup=ReplyKeyboardRemove())
        user_state[user_id] = "awaiting_datetime"
    elif text == "–ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é":
        await update.message.reply_text("–ó–∞–ø–∏—Ç –Ω–∞ –∑–≤'—è–∑–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.", reply_markup=main_menu_markup())
        for admin_id in ADMINS:
            await context.bot.send_message(admin_id,
                                           f"üì© –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è:\nID: {user_id}\n–Ü–º'—è: {update.effective_user.full_name}")
    elif text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞ –≥–æ–ª–æ–≤–Ω—É":
        await update.message.reply_text("–û—Å—å –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_markup())
    else:
        if user_state.get(user_id) == "awaiting_datetime":
            datetime_text = text
            add_consultation(user_id, datetime_text)
            user_state[user_id] = None
            await update.message.reply_text("–î—è–∫—É—î–º–æ! –ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.", reply_markup=main_menu_markup())
            for admin_id in ADMINS:
                await context.bot.send_message(admin_id,
                                               f"üóì –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é:\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ID: {user_id}\n"
                                               f"–Ü–º'—è: {update.effective_user.full_name}\n–î–∞—Ç–∞/—á–∞—Å: {datetime_text}")
        else:
            await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é.", reply_markup=main_menu_markup())

async def show_users_for_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    rows = fetch_users()
    if not rows:
        await update.message.reply_text("–ë–∞–∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.")
        return

    lines = ["üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:"]
    keyboard = []
    for r in rows:
        u_id, first, last, uname, phone = r
        name = (first or "") + (" " + last if last else "")
        lines.append(f"{u_id} | {name.strip()} | @{(uname or '-')} | {phone or '-'}")
        if u_id != user_id:
            keyboard.append([InlineKeyboardButton(f"–í–∏–¥–∞–ª–∏—Ç–∏ {u_id}", callback_data=f"deleteuser:{u_id}")])

    await update.message.reply_text("\n".join(lines),
                                   reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None)

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data or ""

    if data.startswith("startchat:"):
        admin_id = query.from_user.id
        if admin_id not in ADMINS:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
            return
        try:
            user_id = int(data.split(":", 1)[1])
        except Exception:
            await query.edit_message_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.")
            return

        if user_id == admin_id:
            await query.edit_message_text("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ—á–∞—Ç–∏ —á–∞—Ç —ñ–∑ —Å–∞–º–∏–º —Å–æ–±–æ—é.")
            return

        active_chats[admin_id] = user_id
        active_chats[user_id] = admin_id

        await context.bot.send_message(admin_id, f"‚úÖ –ß–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_id} —Ä–æ–∑–ø–æ—á–∞—Ç–æ. –ü–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–ø–∏—à—ñ—Ç—å '–∑–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç'.")
        await context.bot.send_message(user_id, "üëã –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ—á–∞–≤ —á–∞—Ç –∑ –≤–∞–º–∏. –í–∏ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–ø–∏—à—ñ—Ç—å '–∑–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç'.")

        await query.edit_message_text("–ß–∞—Ç –∑–∞–ø—É—â–µ–Ω–æ ‚úÖ")

    elif data.startswith("deleteconsult:"):
        admin_id = query.from_user.id
        if admin_id not in ADMINS:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
            return
        try:
            consult_id = int(data.split(":", 1)[1])
        except Exception:
            await query.edit_message_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.")
            return

        if delete_consultation(consult_id):
            await query.edit_message_text(f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é #{consult_id} –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await query.edit_message_text(f"‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∑ ID #{consult_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")

    elif data.startswith("deleteuser:"):
        admin_id = query.from_user.id
        if admin_id not in ADMINS:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
            return
        try:
            user_to_delete = int(data.split(":", 1)[1])
        except Exception:
            await query.edit_message_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.")
            return

        if user_to_delete == admin_id:
            await query.edit_message_text("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –∞–∫–∞—É–Ω—Ç.")
            return

        deleted = delete_user(user_to_delete)
        if deleted:
            await query.edit_message.edit_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_to_delete} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏.")
        else:
            await query.edit_message.edit_text(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_to_delete} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

async def relay_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sender = update.effective_user
    sender_id = sender.id
    if sender_id not in active_chats:
        return

    target_id = active_chats[sender_id]

    try:
        await context.bot.copy_message(chat_id=target_id,
                                       from_chat_id=sender_id,
                                       message_id=update.message.message_id)
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %s", e)
        if update.message.text:
            await context.bot.send_message(target_id, update.message.text)
        else:
            await context.bot.send_message(sender_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

async def consultations_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    rows = fetch_consultations()
    if not rows:
        await update.message.reply_text("üì≠ –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó.")
        return

    lines = ["üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π (–æ—Å—Ç–∞–Ω–Ω—ñ):"]
    keyboard = []
    for r in rows:
        c_id, u_id, username, phone, dt, created_at = r
        uname = username if username else "-"
        lines.append(f"#{c_id} | user_id:{u_id} | @{uname} | {phone or '-'} | {dt} | –¥–æ–¥–∞–Ω–æ: {created_at}")
        keyboard.append([InlineKeyboardButton(f"–í–∏–¥–∞–ª–∏—Ç–∏ #{c_id}", callback_data=f"deleteconsult:{c_id}")])

    await update.message.reply_text("\n".join(lines),
                                   reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None)

async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    rows = fetch_users()
    if not rows:
        await update.message.reply_text("–ë–∞–∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.")
        return
    lines = ["üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:"]
    keyboard = []
    for r in rows:
        u_id, first, last, uname, phone = r
        name = (first or "") + (" " + last if last else "")
        lines.append(f"{u_id} | {name.strip()} | @{(uname or '-')} | {phone or '-'}")
        if u_id != user_id:
            keyboard.append([InlineKeyboardButton(f"–ü–æ—á–∞—Ç–∏ —á–∞—Ç –∑ {u_id}", callback_data=f"startchat:{u_id}")])

    await update.message.reply_text("\n".join(lines),
                                   reply_markup=InlineKeyboardMarkup(keyboard) if keyboard else None)

def main():
    init_db()
    start_keepalive()  # –ó–∞–ø—É—Å–∫–∞—î–º–æ HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è 24/7 —Ä–æ–±–æ—Ç–∏

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("consultations", consultations_command))
    app.add_handler(CommandHandler("users", users_command))

    app.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    app.add_handler(CallbackQueryHandler(callback_handler))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_text_handler))
    app.add_handler(MessageHandler(~filters.TEXT & ~filters.COMMAND, relay_message))

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app.run_polling()

if __name__ == "__main__":
    main()
